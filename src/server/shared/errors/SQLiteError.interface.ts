export enum SQLiteServerErrorsEnum {
  SQLITE_OK = 'SQLITE_OK',
  SQLITE_ERROR = 'SQLITE_ERROR',
  SQLITE_INTERNAL = 'SQLITE_INTERNAL',
  SQLITE_PERM = 'SQLITE_PERM',
  SQLITE_ABORT = 'SQLITE_ABORT',
  SQLITE_BUSY = 'SQLITE_BUSY',
  SQLITE_LOCKED = 'SQLITE_LOCKED',
  SQLITE_NOMEM = 'SQLITE_NOMEM',
  SQLITE_READONLY = 'SQLITE_READONLY',
  SQLITE_INTERRUPT = 'SQLITE_INTERRUPT',
  SQLITE_IOERR = 'SQLITE_IOERR',
  SQLITE_CORRUPT = 'SQLITE_CORRUPT',
  SQLITE_NOTFOUND = 'SQLITE_NOTFOUND',
  SQLITE_FULL = 'SQLITE_FULL',
  SQLITE_CANTOPEN = 'SQLITE_CANTOPEN',
  SQLITE_PROTOCOL = 'SQLITE_PROTOCOL',
  SQLITE_EMPTY = 'SQLITE_EMPTY',
  SQLITE_SCHEMA = 'SQLITE_SCHEMA',
  SQLITE_MISUSE = 'SQLITE_MISUSE',
  SQLITE_NOLFS = 'SQLITE_NOLFS',
  SQLITE_AUTH = 'SQLITE_AUTH',
  SQLITE_FORMAT = 'SQLITE_FORMAT',
  SQLITE_RANGE = 'SQLITE_RANGE',
  SQLITE_NOTADB = 'SQLITE_NOTADB',
  SQLITE_NOTICE = 'SQLITE_NOTICE',
  SQLITE_WARNING = 'SQLITE_WARNING',
  SQLITE_ROW = 'SQLITE_ROW',
  SQLITE_DONE = 'SQLITE_DONE'
}

export enum SQLiteValidationErrorsEnum {
  SQLITE_TOOBIG = 'SQLITE_TOOBIG',
  SQLITE_CONSTRAINT = 'SQLITE_CONSTRAINT',
  SQLITE_MISMATCH = 'SQLITE_MISMATCH'
}

export interface SQLiteError extends Error {
  code: SQLiteServerErrorsEnum | SQLiteValidationErrorsEnum;
}
